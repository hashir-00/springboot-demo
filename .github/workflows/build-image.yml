# name: Build and Push Docker Image

# on:
#   push:
#     branches: [ master ]
#     environment: development
#     paths:
#       - 'src/**'
#       - '.github/**'
#       - '.github/workflows/app-workflow.yaml'

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Extract metadata (tags, labels) for Docker
#         id: meta
#         uses: docker/metadata-action@v4
#         with:
#           images: hashirhalaldeen00/demo

#       - name: Create .env file
#         run: |
#           echo "MY_DB_URL=${{ secrets.MY_DB_URL }}" >> .env
#           echo "MY_DB_USERNAME=${{ secrets.MY_DB_USERNAME }}" >> .env
#           echo "MY_DB_PASSWORD=${{ secrets.MY_DB_PASSWORD }}" >> .env
#           echo "MY_GITHUB_OAUTH_CLIENT_ID=${{ secrets.MY_GITHUB_OAUTH_CLIENT_ID }}" >> .env
#           echo "MY_GITHUB_OAUTH_CLIENT_SECRET=${{ secrets.MY_GITHUB_OAUTH_CLIENT_SECRET }}" >> .env
#           echo "MY_SERVER_PORT=${{ secrets.MY_SERVER_PORT }}" >> .env
#           echo "MY_JWT_SECURITY_KEY=${{ secrets.MY_JWT_SECURITY_KEY }}" >> .env
#           echo "MY_JWT_SECURITY_KEY_EXP_TIME=${{ secrets.MY_JWT_SECURITY_KEY_EXP_TIME }}" >> .env
#           echo "MY_REFRESH_TOKEN_TTL=${{ secrets.MY_REFRESH_TOKEN_TTL }}" >> .env
#           echo "MY_CLIENT_URL=${{ secrets.MY_CLIENT_URL }}" >> .env
#           echo "MY_GOOGLE_DRIVE_ID=${{ secrets.MY_GOOGLE_DRIVE_ID }}" >> .env
#           echo "MY_APPLICATION_NAME=${{ secrets.MY_APPLICATION_NAME }}" >> .env
          
#       - name: Set up JDK 23
#         uses: actions/setup-java@v4
#         with:
#           java-version: '23'
#           distribution: 'temurin'
#           server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
#           settings-path: ${{ github.workspace }} # location for the settings.xml file

#       - name: Build Spring Boot application
#         run: |
#             mvn clean package


#       - name: Build and push Docker image
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}

#       - name: Output Docker image details
#         run: echo "Docker image built and pushed successfully!"
name: Build, Test, and Run on PR

on:
  push:
    branches: [ master ]  # Runs on PRs targeting master

jobs:
  build-and-run:
    runs-on: ubuntu-latest  # Use your ubuntu-latest runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'
          cache: maven

      - name: Create .env file
        run: |
          echo "MY_DB_URL=${{ secrets.MY_DB_URL }}" >> .env
          echo "MY_DB_USERNAME=${{ secrets.MY_DB_USERNAME }}" >> .env
          echo "MY_DB_PASSWORD=${{ secrets.MY_DB_PASSWORD }}" >> .env
          echo "MY_GITHUB_OAUTH_CLIENT_ID=${{ secrets.MY_GITHUB_OAUTH_CLIENT_ID }}" >> .env
          echo "MY_GITHUB_OAUTH_CLIENT_SECRET=${{ secrets.MY_GITHUB_OAUTH_CLIENT_SECRET }}" >> .env
          echo "MY_SERVER_PORT=${{ secrets.MY_SERVER_PORT }}" >> .env
          echo "MY_JWT_SECURITY_KEY=${{ secrets.MY_JWT_SECURITY_KEY }}" >> .env
          echo "MY_JWT_SECURITY_KEY_EXP_TIME=${{ secrets.MY_JWT_SECURITY_KEY_EXP_TIME }}" >> .env
          echo "MY_REFRESH_TOKEN_TTL=${{ secrets.MY_REFRESH_TOKEN_TTL }}" >> .env
          echo "MY_CLIENT_URL=${{ secrets.MY_CLIENT_URL }}" >> .env
          echo "MY_GOOGLE_DRIVE_ID=${{ secrets.MY_GOOGLE_DRIVE_ID }}" >> .env
          echo "MY_APPLICATION_NAME=${{ secrets.MY_APPLICATION_NAME }}" >> .env

      - name: Build with Maven
        run: mvn clean package

#      - name: Run Application
#        run: |
#          nohup java -jar target/*.jar &  # Run in background
#          sleep 5  # Wait for it to start
#          ps aux | grep java  # Debug: Show running Java processes
#
      - name: Upload Artifact
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: demo-war
          path: "/target/demo-0.0.1-SNAPSHOT.jar"
          if-no-files-found: error

      - name: Run Tests (Optional)
        run: mvn test

      - name: Cleanup Process
        if: always()
        run: pkill -f 'java -jar target' || echo "No process found"
