name: Build, Push, and Deploy

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: hashirhalaldeen00/demo:latest

#      - name: Deploy to VPS via SSH
#        uses: appleboy/ssh-action@v0.1.10
#        with:
#          host: ${{ secrets.VPS_HOST }}
#          username: ${{ secrets.VPS_USER }}
#          password: ${{ secrets.VPS_PASSWORD }}
#          script: |
#            # Create the .env file from CI secrets
#            echo "MY_DB_URL=${{ secrets.MY_DB_URL }}" > .env
#            echo "MY_DB_USERNAME=${{ secrets.MY_DB_USERNAME }}" >> .env
#            echo "MY_DB_PASSWORD=${{ secrets.MY_DB_PASSWORD }}" >> .env
#            echo "MY_GITHUB_OAUTH_CLIENT_ID=${{ secrets.MY_GITHUB_OAUTH_CLIENT_ID }}" >> .env
#            echo "MY_GITHUB_OAUTH_CLIENT_SECRET=${{ secrets.MY_GITHUB_OAUTH_CLIENT_SECRET }}" >> .env
#            echo "MY_SERVER_PORT=${{ secrets.MY_SERVER_PORT }}" >> .env
#            echo "MY_SERVER_ADDRESS=0.0.0.0" >> .env
#            echo "MY_JWT_SECURITY_KEY=${{ secrets.MY_JWT_SECURITY_KEY }}" >> .env
#            echo "MY_JWT_SECURITY_KEY_EXP_TIME=${{ secrets.MY_JWT_SECURITY_KEY_EXP_TIME }}" >> .env
#            echo "MY_REFRESH_TOKEN_TTL=${{ secrets.MY_REFRESH_TOKEN_TTL }}" >> .env
#            echo "MY_CLIENT_URL=${{ secrets.MY_CLIENT_URL }}" >> .env
#            echo "MY_GOOGLE_DRIVE_ID=${{ secrets.MY_GOOGLE_DRIVE_ID }}" >> .env
#            echo "MY_APPLICATION_NAME=${{ secrets.MY_APPLICATION_NAME }}" >> .env
#            echo "MY_SPRING_PROFILE=dev" >> .env
#
#            # Print the .env file to ensure it's correct
#            cat .env
#
#            # Prune old images and containers
#            docker system prune -a -f
#
#            # Pull the latest Docker image
#            docker pull hashirhalaldeen00/demo:latest
#
#            # Stop and remove the existing container if running (uncomment to ensure removal)
#            docker stop my-demo-container || true
#            docker rm my-demo-container || true
#
#            # Run the new container with the copied environment variables
#            docker run -d --name my-demo-container --env-file .env -p 8080:8080 hashirhalaldeen00/demo:latest

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}  # Use SSH key (recommended)
          script: |
            # Create .env from secrets
            echo "MY_DB_URL=${{ secrets.MY_DB_URL }}" > .env
            echo "MY_DB_USERNAME=${{ secrets.MY_DB_USERNAME }}" >> .env
            echo "MY_DB_PASSWORD=${{ secrets.MY_DB_PASSWORD }}" >> .env
            echo "MY_GITHUB_OAUTH_CLIENT_ID=${{ secrets.MY_GITHUB_OAUTH_CLIENT_ID }}" >> .env
            echo "MY_GITHUB_OAUTH_CLIENT_SECRET=${{ secrets.MY_GITHUB_OAUTH_CLIENT_SECRET }}" >> .env
            echo "MY_SERVER_PORT=${{ secrets.MY_SERVER_PORT }}" >> .env
            echo "MY_SERVER_ADDRESS=0.0.0.0" >> .env
            echo "MY_JWT_SECURITY_KEY=${{ secrets.MY_JWT_SECURITY_KEY }}" >> .env
            echo "MY_JWT_SECURITY_KEY_EXP_TIME=${{ secrets.MY_JWT_SECURITY_KEY_EXP_TIME }}" >> .env
            echo "MY_REFRESH_TOKEN_TTL=${{ secrets.MY_REFRESH_TOKEN_TTL }}" >> .env
            echo "MY_CLIENT_URL=${{ secrets.MY_CLIENT_URL }}" >> .env
            echo "MY_GOOGLE_DRIVE_ID=${{ secrets.MY_GOOGLE_DRIVE_ID }}" >> .env
            echo "MY_APPLICATION_NAME=${{ secrets.MY_APPLICATION_NAME }}" >> .env
            echo "MY_SPRING_PROFILE=dev" >> .env.
            
            # Write Docker Compose file
            cat > docker-compose.yml <<EOL
            version: '3.8'
            services:
              db:
                image: postgres:17
                container_name: local_db
                restart: always
                environment:
                  POSTGRES_DB: springboot
                  POSTGRES_USER: postgres
                  POSTGRES_PASSWORD: root
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                ports:
                  - "5432:5432"
              app:
                image: hashirhalaldeen00/demo:latest
                container_name: spring_app
                env_file: .env
                depends_on:
                  - db
                ports:
                  - "8080:8080"
            volumes:
              postgres_data:
            EOL
            
            # Install Docker Compose (if missing)
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            
            # Stop and start services
            docker-compose down
            docker-compose pull app  # Pull latest app image
            docker-compose up -d