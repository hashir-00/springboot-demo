name: Build, Push, and Deploy

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: hashirhalaldeen00/demo:latest

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            # Create the .env file from CI secrets
            echo "MY_DB_URL=${{ secrets.MY_DB_URL }}" > .env
            echo "MY_DB_USERNAME=${{ secrets.MY_DB_USERNAME }}" >> .env
            echo "MY_DB_PASSWORD=${{ secrets.MY_DB_PASSWORD }}" >> .env
            echo "MY_GITHUB_OAUTH_CLIENT_ID=${{ secrets.MY_GITHUB_OAUTH_CLIENT_ID }}" >> .env
            echo "MY_GITHUB_OAUTH_CLIENT_SECRET=${{ secrets.MY_GITHUB_OAUTH_CLIENT_SECRET }}" >> .env
            echo "MY_SERVER_PORT=${{ secrets.MY_SERVER_PORT }}" >> .env
            echo "MY_JWT_SECURITY_KEY=${{ secrets.MY_JWT_SECURITY_KEY }}" >> .env
            echo "MY_JWT_SECURITY_KEY_EXP_TIME=${{ secrets.MY_JWT_SECURITY_KEY_EXP_TIME }}" >> .env
            echo "MY_REFRESH_TOKEN_TTL=${{ secrets.MY_REFRESH_TOKEN_TTL }}" >> .env
            echo "MY_CLIENT_URL=${{ secrets.MY_CLIENT_URL }}" >> .env
            echo "MY_GOOGLE_DRIVE_ID=${{ secrets.MY_GOOGLE_DRIVE_ID }}" >> .env
            echo "MY_APPLICATION_NAME=${{ secrets.MY_APPLICATION_NAME }}" >> .env

            # Prune old images and containers
            docker system prune -a -f

            # Pull the latest Docker image
            docker pull hashirhalaldeen00/demo:latest

            # Stop and remove the existing container if running
            docker stop my-demo-container || true
            docker rm my-demo-container || true

            # Run the new container with the copied environment variables
            docker run -d --name my-demo-container --env-file .env -p 8080:8080 hashirhalaldeen00/demo:latest
